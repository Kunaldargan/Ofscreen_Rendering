// Basic sobel filter implementation
// Jeroen Baert - jeroen.baert@cs.kuleuven.be
// 
// www.forceflow.be


//Shader Inputs

uniform vec3      iResolution;           // viewport resolution (in pixels)
uniform float     iTime;                 // shader playback time (in seconds)
uniform float     iTimeDelta;            // render time (in seconds)
uniform int       iFrame;                // shader playback frame
uniform float     iChannelTime[4];       // channel playback time (in seconds)
uniform vec3      iChannelResolution[4]; // channel resolution (in pixels)
uniform vec4      iMouse;                // mouse pixel coords. xy: current (if MLB down), zw: click
uniform samplerXX iChannel0..3;          // input channel. XX = 2D/Cube
uniform vec4      iDate;                 // (year, month, day, time in seconds)
uniform float     iSampleRate;           // sound sample rate (i.e., 44100)


// Use these parameters to fiddle with settings
float step = 1.0;

float intensity(in vec4 color){
	return sqrt((color.x*color.x)+(color.y*color.y)+(color.z*color.z));
}

vec3 sobel(float stepx, float stepy, vec2 center){
	// get samples around pixel
    float tleft = intensity(texture(iChannel0,center + vec2(-stepx,stepy)));
    float left = intensity(texture(iChannel0,center + vec2(-stepx,0)));
    float bleft = intensity(texture(iChannel0,center + vec2(-stepx,-stepy)));
    float top = intensity(texture(iChannel0,center + vec2(0,stepy)));
    float bottom = intensity(texture(iChannel0,center + vec2(0,-stepy)));
    float tright = intensity(texture(iChannel0,center + vec2(stepx,stepy)));
    float right = intensity(texture(iChannel0,center + vec2(stepx,0)));
    float bright = intensity(texture(iChannel0,center + vec2(stepx,-stepy)));
 
	// Sobel masks (see http://en.wikipedia.org/wiki/Sobel_operator)
	//        1 0 -1     -1 -2 -1
	//    X = 2 0 -2  Y = 0  0  0
	//        1 0 -1      1  2  1
	
	// You could also use Scharr operator:
	//        3 0 -3        3 10   3
	//    X = 10 0 -10  Y = 0  0   0
	//        3 0 -3        -3 -10 -3
 
    float x = tleft + 2.0*left + bleft - tright - 2.0*right - bright;
    float y = -tleft - 2.0*top - tright + bleft + 2.0 * bottom + bright;
    float color = sqrt((x*x) + (y*y));
    return vec3(color,color,color);
 }

void mainImage( out vec4 fragColor, in vec2 fragCoord ){
	vec2 uv = fragCoord.xy / iResolution.xy;
	vec4 color = texture(iChannel0, uv.xy);
	fragColor.xyz = sobel(step/iResolution[0], step/iResolution[1], uv);
}

#version 330 core

// Interpolated values from the vertex shaders
//in vec2 UV;

//Texture to be sampled
//uniform sampler2D myTextureSampler;

//const int samples = 9; // Number of samples we want to take (this number is actually squared)
//float weight[samples]; // This array will store weights to multiply our samples by
//float mean = samples / 2; // Part of the gaussian equation, we want it in the middle of our sample pool
//float standardDeviation = samples / 4; // The standard deviation. higher numbers will be more blurred, lower will be more accurate. Can't be less than 1
//float sdsqrd = standardDeviation * standardDeviation * 2; // A precalculated value for the equation.

//void main(void)
//{

	// Generate an array of weights
	// This is the gaussian distribution formula.
	// The area under the curve is defined as being 1.
	// If we multiply a set pixels by these weights and add them together, we should end up with the same total color as we started with.
	// NOTE: In a more optimized solution, we would calculate these values once on the cpu, and send them to the gpu in a uniform buffer.
	for(int x = 0; x < samples; x++)
	{
		float exponent = -pow(x - mean, 2) / sdsqrd;
		weight[x] = pow(2.718, exponent) / pow(3.141 * sdsqrd, .5);
	}

	// This function allows us to get the dimensions of a texture, (which in this case is the screen)
	vec2 screenSize = textureSize(myTextureSampler, 0);

	// Loop over all pixels within a square
	// NOTE: An optmized solution would perform this operation as two passes, bluring horizontally, then vertically.
	// Basically, instead of sampling an NxN square each time, you would only need to do two Nx1 squares.
	// Conveniently, if you do the math, that method ends up giving the exact same result!
	for(int i = 0; i < samples; i ++)
	{
		for(int j = 0; j < samples; j ++)
		{
			// Each pixel is weighted using width and height weights multiplied. This makes pixels affect eachother in a circlular shape.
			color += texture(myTextureSampler, UV + vec2(i / screenSize.x, j / screenSize.y)).rgb * weight[i] * weight[j]; 
		}
	}

	// Once we have that coordinate, we can read from the texture at that location and output it to the screen.
	//gl_FragColor = color;
}