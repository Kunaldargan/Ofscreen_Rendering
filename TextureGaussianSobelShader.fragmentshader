#version 330 core

// Interpolated values from the vertex shaders
in vec2 UV;

//Texture to be sampled
uniform sampler2D myTextureSampler;

const int samples = 9; // Number of samples we want to take (this number is actually squared)
float weightX[samples] = float[samples](1,0,-1,2,0,-2,1,0,-1); // This array will store weights to multiply our samples by
float weightY[samples] = float[samples](-1,-2,-1,0,0,0,1,2,1); // This array will store weights to multiply our samples by

// Ouput data
out vec3 color;

// This function allows us to get the dimensions of a texture, (which in this case is the screen)
vec2 screenSize = textureSize(myTextureSampler, 0);

	// Sobel masks (see http://en.wikipedia.org/wiki/Sobel_operator)
	//        1 0 -1     -1 -2 -1
	//    X = 2 0 -2  Y = 0  0  0
	//        1 0 -1      1  2  1
	
	// You could also use Scharr operator:
	//        3  0 -3        3  10  3
	//    X = 10 0 -10  Y = 0  0   0
	//        3  0 -3       -3 -10 -3
 
float intensity(in vec4 color){
	return sqrt((color.x*color.x)+(color.y*color.y)+(color.z*color.z));
}

void main(void)
{
	int limit = samples/2;
	float colorX;
	float colorY;

	for(int i =-limit; i < limit; i ++)
	{
		vec2 value = UV + vec2(i / screenSize.x, 0);
		// Each pixel is weighted using width and height weights multiplied. This makes pixels affect eachother in a circlular shape.
		colorX += intensity(texture(myTextureSampler,value )) * weightX[i+limit]; 
	}

	for(int j =-limit; j < limit; j ++)
	{	
		vec2 value = UV + vec2(0, j / screenSize.y);

		// Each pixel is weighted using width and height weights multiplied. This makes pixels affect eachother in a circlular shape.
		colorY += intensity(texture(myTextureSampler,value ))* weightY[j+limit]; 
	}
	float val = sqrt((colorX*colorX)+(colorY*colorY));
	
	color = vec3(val,val,val);
	// Once we have that coordinate, we can read from the texture at that location and output it to the screen.
	//gl_FragColor = color;
}